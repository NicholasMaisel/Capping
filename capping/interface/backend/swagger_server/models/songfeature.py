# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Songfeature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, acousticness: float=None, danceability: float=None, duration_ms: int=None, energy: float=None, instrumentalness: float=None, musicalkey: int=None, liveness: float=None, loudness: float=None, mode: int=None, speechiness: float=None, tempo: float=None, timesignature: int=None, valence: float=None, songid: str=None):  # noqa: E501
        """Songfeature - a model defined in Swagger

        :param acousticness: The acousticness of this Songfeature.  # noqa: E501
        :type acousticness: float
        :param danceability: The danceability of this Songfeature.  # noqa: E501
        :type danceability: float
        :param duration_ms: The duration_ms of this Songfeature.  # noqa: E501
        :type duration_ms: int
        :param energy: The energy of this Songfeature.  # noqa: E501
        :type energy: float
        :param instrumentalness: The instrumentalness of this Songfeature.  # noqa: E501
        :type instrumentalness: float
        :param musicalkey: The musicalkey of this Songfeature.  # noqa: E501
        :type musicalkey: int
        :param liveness: The liveness of this Songfeature.  # noqa: E501
        :type liveness: float
        :param loudness: The loudness of this Songfeature.  # noqa: E501
        :type loudness: float
        :param mode: The mode of this Songfeature.  # noqa: E501
        :type mode: int
        :param speechiness: The speechiness of this Songfeature.  # noqa: E501
        :type speechiness: float
        :param tempo: The tempo of this Songfeature.  # noqa: E501
        :type tempo: float
        :param timesignature: The timesignature of this Songfeature.  # noqa: E501
        :type timesignature: int
        :param valence: The valence of this Songfeature.  # noqa: E501
        :type valence: float
        :param songid: The songid of this Songfeature.  # noqa: E501
        :type songid: str
        """
        self.swagger_types = {
            'acousticness': float,
            'danceability': float,
            'duration_ms': int,
            'energy': float,
            'instrumentalness': float,
            'musicalkey': int,
            'liveness': float,
            'loudness': float,
            'mode': int,
            'speechiness': float,
            'tempo': float,
            'timesignature': int,
            'valence': float,
            'songid': str
        }

        self.attribute_map = {
            'acousticness': 'acousticness',
            'danceability': 'danceability',
            'duration_ms': 'duration_ms',
            'energy': 'energy',
            'instrumentalness': 'instrumentalness',
            'musicalkey': 'musicalkey',
            'liveness': 'liveness',
            'loudness': 'loudness',
            'mode': 'mode',
            'speechiness': 'speechiness',
            'tempo': 'tempo',
            'timesignature': 'timesignature',
            'valence': 'valence',
            'songid': 'songid'
        }

        self._acousticness = acousticness
        self._danceability = danceability
        self._duration_ms = duration_ms
        self._energy = energy
        self._instrumentalness = instrumentalness
        self._musicalkey = musicalkey
        self._liveness = liveness
        self._loudness = loudness
        self._mode = mode
        self._speechiness = speechiness
        self._tempo = tempo
        self._timesignature = timesignature
        self._valence = valence
        self._songid = songid

    @classmethod
    def from_dict(cls, dikt) -> 'Songfeature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The songfeature of this Songfeature.  # noqa: E501
        :rtype: Songfeature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acousticness(self) -> float:
        """Gets the acousticness of this Songfeature.


        :return: The acousticness of this Songfeature.
        :rtype: float
        """
        return self._acousticness

    @acousticness.setter
    def acousticness(self, acousticness: float):
        """Sets the acousticness of this Songfeature.


        :param acousticness: The acousticness of this Songfeature.
        :type acousticness: float
        """

        self._acousticness = acousticness

    @property
    def danceability(self) -> float:
        """Gets the danceability of this Songfeature.


        :return: The danceability of this Songfeature.
        :rtype: float
        """
        return self._danceability

    @danceability.setter
    def danceability(self, danceability: float):
        """Sets the danceability of this Songfeature.


        :param danceability: The danceability of this Songfeature.
        :type danceability: float
        """

        self._danceability = danceability

    @property
    def duration_ms(self) -> int:
        """Gets the duration_ms of this Songfeature.


        :return: The duration_ms of this Songfeature.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms: int):
        """Sets the duration_ms of this Songfeature.


        :param duration_ms: The duration_ms of this Songfeature.
        :type duration_ms: int
        """

        self._duration_ms = duration_ms

    @property
    def energy(self) -> float:
        """Gets the energy of this Songfeature.


        :return: The energy of this Songfeature.
        :rtype: float
        """
        return self._energy

    @energy.setter
    def energy(self, energy: float):
        """Sets the energy of this Songfeature.


        :param energy: The energy of this Songfeature.
        :type energy: float
        """

        self._energy = energy

    @property
    def instrumentalness(self) -> float:
        """Gets the instrumentalness of this Songfeature.


        :return: The instrumentalness of this Songfeature.
        :rtype: float
        """
        return self._instrumentalness

    @instrumentalness.setter
    def instrumentalness(self, instrumentalness: float):
        """Sets the instrumentalness of this Songfeature.


        :param instrumentalness: The instrumentalness of this Songfeature.
        :type instrumentalness: float
        """

        self._instrumentalness = instrumentalness

    @property
    def musicalkey(self) -> int:
        """Gets the musicalkey of this Songfeature.


        :return: The musicalkey of this Songfeature.
        :rtype: int
        """
        return self._musicalkey

    @musicalkey.setter
    def musicalkey(self, musicalkey: int):
        """Sets the musicalkey of this Songfeature.


        :param musicalkey: The musicalkey of this Songfeature.
        :type musicalkey: int
        """

        self._musicalkey = musicalkey

    @property
    def liveness(self) -> float:
        """Gets the liveness of this Songfeature.


        :return: The liveness of this Songfeature.
        :rtype: float
        """
        return self._liveness

    @liveness.setter
    def liveness(self, liveness: float):
        """Sets the liveness of this Songfeature.


        :param liveness: The liveness of this Songfeature.
        :type liveness: float
        """

        self._liveness = liveness

    @property
    def loudness(self) -> float:
        """Gets the loudness of this Songfeature.


        :return: The loudness of this Songfeature.
        :rtype: float
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness: float):
        """Sets the loudness of this Songfeature.


        :param loudness: The loudness of this Songfeature.
        :type loudness: float
        """

        self._loudness = loudness

    @property
    def mode(self) -> int:
        """Gets the mode of this Songfeature.


        :return: The mode of this Songfeature.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode: int):
        """Sets the mode of this Songfeature.


        :param mode: The mode of this Songfeature.
        :type mode: int
        """

        self._mode = mode

    @property
    def speechiness(self) -> float:
        """Gets the speechiness of this Songfeature.


        :return: The speechiness of this Songfeature.
        :rtype: float
        """
        return self._speechiness

    @speechiness.setter
    def speechiness(self, speechiness: float):
        """Sets the speechiness of this Songfeature.


        :param speechiness: The speechiness of this Songfeature.
        :type speechiness: float
        """

        self._speechiness = speechiness

    @property
    def tempo(self) -> float:
        """Gets the tempo of this Songfeature.


        :return: The tempo of this Songfeature.
        :rtype: float
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo: float):
        """Sets the tempo of this Songfeature.


        :param tempo: The tempo of this Songfeature.
        :type tempo: float
        """

        self._tempo = tempo

    @property
    def timesignature(self) -> int:
        """Gets the timesignature of this Songfeature.


        :return: The timesignature of this Songfeature.
        :rtype: int
        """
        return self._timesignature

    @timesignature.setter
    def timesignature(self, timesignature: int):
        """Sets the timesignature of this Songfeature.


        :param timesignature: The timesignature of this Songfeature.
        :type timesignature: int
        """

        self._timesignature = timesignature

    @property
    def valence(self) -> float:
        """Gets the valence of this Songfeature.


        :return: The valence of this Songfeature.
        :rtype: float
        """
        return self._valence

    @valence.setter
    def valence(self, valence: float):
        """Sets the valence of this Songfeature.


        :param valence: The valence of this Songfeature.
        :type valence: float
        """

        self._valence = valence

    @property
    def songid(self) -> str:
        """Gets the songid of this Songfeature.


        :return: The songid of this Songfeature.
        :rtype: str
        """
        return self._songid

    @songid.setter
    def songid(self, songid: str):
        """Sets the songid of this Songfeature.


        :param songid: The songid of this Songfeature.
        :type songid: str
        """

        self._songid = songid
