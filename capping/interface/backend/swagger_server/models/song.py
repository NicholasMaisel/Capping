# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Song(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, song_id: str=None, song_name: str=None, song_genre: str=None, artist_id: str=None):  # noqa: E501
        """Song - a model defined in Swagger

        :param song_id: The song_id of this Song.  # noqa: E501
        :type song_id: str
        :param song_name: The song_name of this Song.  # noqa: E501
        :type song_name: str
        :param song_genre: The song_genre of this Song.  # noqa: E501
        :type song_genre: str
        :param artist_id: The artist_id of this Song.  # noqa: E501
        :type artist_id: str
        """
        self.swagger_types = {
            'song_id': str,
            'song_name': str,
            'song_genre': str,
            'artist_id': str
        }

        self.attribute_map = {
            'song_id': 'songID',
            'song_name': 'SongName',
            'song_genre': 'SongGenre',
            'artist_id': 'ArtistID'
        }

        self._song_id = song_id
        self._song_name = song_name
        self._song_genre = song_genre
        self._artist_id = artist_id

    @classmethod
    def from_dict(cls, dikt) -> 'Song':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The song of this Song.  # noqa: E501
        :rtype: Song
        """
        return util.deserialize_model(dikt, cls)

    @property
    def song_id(self) -> str:
        """Gets the song_id of this Song.


        :return: The song_id of this Song.
        :rtype: str
        """
        return self._song_id

    @song_id.setter
    def song_id(self, song_id: str):
        """Sets the song_id of this Song.


        :param song_id: The song_id of this Song.
        :type song_id: str
        """

        self._song_id = song_id

    @property
    def song_name(self) -> str:
        """Gets the song_name of this Song.


        :return: The song_name of this Song.
        :rtype: str
        """
        return self._song_name

    @song_name.setter
    def song_name(self, song_name: str):
        """Sets the song_name of this Song.


        :param song_name: The song_name of this Song.
        :type song_name: str
        """

        self._song_name = song_name

    @property
    def song_genre(self) -> str:
        """Gets the song_genre of this Song.


        :return: The song_genre of this Song.
        :rtype: str
        """
        return self._song_genre

    @song_genre.setter
    def song_genre(self, song_genre: str):
        """Sets the song_genre of this Song.


        :param song_genre: The song_genre of this Song.
        :type song_genre: str
        """

        self._song_genre = song_genre

    @property
    def artist_id(self) -> str:
        """Gets the artist_id of this Song.


        :return: The artist_id of this Song.
        :rtype: str
        """
        return self._artist_id

    @artist_id.setter
    def artist_id(self, artist_id: str):
        """Sets the artist_id of this Song.


        :param artist_id: The artist_id of this Song.
        :type artist_id: str
        """

        self._artist_id = artist_id
